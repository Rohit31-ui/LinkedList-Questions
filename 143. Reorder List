143. Reorder List
You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

class Solution {
    public void reorderList(ListNode head) {
        //base case
      if(head==null || head.next==null) return;
      
       ListNode fast = head;
       ListNode slow = head;
        
        //  step 1:- find middle element
       while(fast!=null && fast.next!=null){
          fast=fast.next.next;
          slow=slow.next;
       }
     

     ListNode prev=null;
     ListNode curr=slow;
     ListNode After= null;
    
    //  step2 :- reverse half list
     while(curr!=null){
        After = curr.next;
        curr.next=prev;
        prev=curr;
        curr=After;
     }

     ListNode first = head;
     ListNode second = prev;

    // step3 :- merge list
   while(second.next!=null){
    ListNode tmp1=first.next,tmp2=second.next;
    first.next=second;
    second.next=tmp1;
    first=tmp1;
    second=tmp2;
   }

    }
}
