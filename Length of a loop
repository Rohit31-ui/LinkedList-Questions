Find length of Loop

Given the head of a linked list, determine whether the list contains a loop. If a loop is present, return the number of nodes in the loop, otherwise return 0.

Note: Internally, pos(1 based index) is used to denote the position of the node that tail's next pointer is connected to. If pos = 0, it means the last node points to null, indicating there is no loop. Note that pos is not passed as a parameter.

Examples:

Input: pos = 2,
   
Output: 4
Explanation: There exists a loop in the linked list and the length of the loop is 4.
Input: pos = 3,
   
Output: 3
Explanation: The loop is from 19 to 10. So length of loop is 19 → 33 → 10 = 3.
Input: pos = 0,
    
Output: 0
Explanation: There is no loop.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 104
0 ≤ pos < number of nodes


//first check the given list has a loop and then find its length
class Solution {
    public int lengthOfLoop(Node head) {
        // code here
        Node fast=head;
        Node slow=head;
        
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            //that means we get a loop
            if(slow==fast){
                break;
            }
        }
        //that means there is no loop
        if(fast==null || fast.next==null) return 0;

      
        int count=findCount(slow);
        
        return count;
    }
//count length function 
    public static int findCount(Node slow){
        int cnt=0;
        Node temp=slow;
        while(temp.next!=slow){
            cnt++;
            temp=temp.next;
        }
        cnt++;//for last remaining
        
        return cnt;
        
    }
}
