

24. Swap Nodes in Pairs

Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:

Input: head = [1,2,3,4]

Output: [2,1,4,3]

Explanation:



Example 2:

Input: head = []

Output: []

Example 3:

Input: head = [1]

Output: [1]

Example 4:

Input: head = [1,2,3]

Output: [2,1,3]

 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100


class Solution {
    public ListNode swapPairs(ListNode head) {
        //base case
        // if(head==null || head.next==null){
        //     return head;
        // }

        // //arrging as per the question reqirement
        // int temp=head.val;
        // head.val=head.next.val;
        // head.next.val=temp;

        // //we have swaped first two then go for next two
        // swapPairs(head.next.next);
        // return head;

        //base case
        if(head==null || head.next==null){
            return head;
        }
      
        ListNode dummy=new ListNode(-1);
        ListNode prev=dummy;

        ListNode temp=head;

        while(temp!=null && temp.next!=null){
            ListNode first=temp;
            ListNode second=temp.next;

            prev.next=second;
            first.next=second.next;
            second.next=first;

            prev=first;
            temp=first.next;

        }

        return dummy.next;
    }
}
