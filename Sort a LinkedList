148. Sort List

Given the head of a linked list, return the list after sorting it in ascending order.
//

Example 1:

Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

class Solution {
    public ListNode sortList(ListNode head) {
        ArrayList<Integer> list =  new ArrayList<>();

        ListNode temp=head;
        while(temp!=null){
            list.add(temp.val);
            temp=temp.next;
        }
        Collections.sort(list);
        temp=head;
        int i=0;
        while(temp!=null){
            temp.val=list.get(i++);
            temp=temp.next;
        }

        return head;

    }
}

//byusing merge sort
class Solution {
    public ListNode sortList(ListNode head) {
        // Base case: empty or single node
        if (head == null || head.next == null) return head;

        // Step 1: Split the list into two halves
        ListNode mid = getMid(head);
        ListNode rightHalf = mid.next;
        mid.next = null;  // break the list

        // Step 2: Recursively sort each half
        ListNode left = sortList(head);
        ListNode right = sortList(rightHalf);

        // Step 3: Merge the two sorted halves
        return merge(left, right);
    }

    // Helper to find the middle of the linked list
    private ListNode getMid(ListNode head) {
        ListNode slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Merge two sorted linked lists
    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        if (l1 != null) tail.next = l1;
        if (l2 != null) tail.next = l2;

        return dummy.next;
    }
}

 
